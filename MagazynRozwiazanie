
/*

Objaśnienia:

Przedstawione rozwiązania dotyczą wersji MS SQL 2014. Możliwość skorzystania z 
OPENROWSET wymaga zainstalowania sterowników ODBC lub posiadania odpowiednich bibliotek OLE DB.
W podanym rozwiązaniu dostawcą OLE DB jest Microsoft.Jet.OLEDB.12.0. 
Wybranie odpowiedniego dostawcy wymaga sprawdzenia w bazie jacy dostawcy są zainstalowani na serwerze. 
Można ich odnaleźć (ręcznie) w drzewie hierarchii obiektów klikając kolejno Databases-Server Objects-Linked Servers-Providers. 
Można też ich wyświetlić za pomocą poniższego polecenia : EXEC xp_enum_oledb_providers.
Trzeba też podać wersję excela w odpowiednim formacie np. Excel 2007 to wersja Excela 12.0. 
Informacje te można znaleźć na stronach dokumentacji technicznej Microsoft.
Przyjęto, że plik przesłany przez firmę zewnętrzną zapisywany jest na pulpicie.

W rozwiązaniu pominięto tworzenie dedykowanego schematu w bazie danych.
Schemat ułatwia administrowanie dostępem do poszczególnych obiektów w bazie.
Z racji tego, że rozwiązanie ma charakter demonstracyjny i nie występują żadni stali  użytkownicy w bazie 
nie utworzono dedykowanego schematu. Wszystkie obiekty zastaną utworzone w domyślnym schemacie dbo,
który nawet jeśli nie zostanie podany to SQL Server przypisze go jako schemat domyślny. 
Zakładamy też, że osoby mogące korzystać z przedstawionych rozwiązań nie należą do grupy w systemie operacyjnym Windows. 

(Działa dla SQL 2016 i 2014) Do sprawdzenia czy istnieje dany obiekt w bazie została wykorzystana konstrukcja If OBJECT_ID
(Wyjątek sprawdzenie czy istnieje baza danych). Sprawdza ona czy istnieje obiekt o dokładnie takiej samej nazwie jeśli tak 
to likwiduje go i następnie wykonuje się polecenie utworzenia danego obiektu. Wybranie tej konstrukcji wynika z założenia,
iż jeżeli istnieje obiekt o tej nazwie to został utworzony w wyniku błędu. Stąd konieczność zniszczenia go i utworzenia prawidłowego. 

Zakładamy, że całość działań jest wykonywana z komputera pracownika Jana Kowalskiego, 
który ma uprawnienia pozwalające na wykonanie poniższego kodu. Jego numer identyfikacyjny w firmie składa się 
z inicjałów imienia i nazwiska oraz numeru pracownika co razem daje JK43. Jego numer identyfikacyjny jest jednocześnie
jego loginem do systemu Windows.
*/



IF EXISTS (SELECT * FROM sys.databases WHERE name='Magazynowanie')
DROP DATABASE Magazynowanie;

/*
Sprawdza czy istnieje baza danych Magazynowanie jeśli tak to likwiduje ją.
W wypadku sprawdzenia czy istnieje baza danych nie można użyć funkcji OBJECT_ID, 
ponieważ działa ona tylko na obiektach znajdujących się w schematach.
*/


CREATE DATABASE Magazynowanie;
GO

USE Magazynowanie;
GO

--wskazanie na wykorzystanie bazy magazynowanie do utworzenia obiektow--

IF OBJECT_ID('Taryfa') IS NOT NULL DROP TABLE  Taryfa;

-- sprawdza czy istnieje tabela taryfa jesli tak to liwkduje ją—-

CREATE TABLE Taryfa (ID int IDENTITY(1,1) PRIMARY KEY, Stawka decimal(8,7) not null UNIQUE); 

--Tworzenie tabeli ze stawkami magazynowymi--

INSERT INTO Taryfa (Stawka) VALUES
(0.00060), (0.0007), (0.0015),(0.0085),(0.0004),
(0.001),(0.0003),(0.0005),(0.0019),(0.0002);

--Wstawia stawki do tabeli ze stawkami magazynowymi—-

SELECT*FROM Taryfa;

--sprawdza co zostało wstawione do tabeli taryfa--

IF OBJECT_ID('Magazyn') IS NOT NULL DROP TABLE  Magazyn;

-- sprawdza czy istnieje tabela magazyn jeśli tak to likwiduje ją--

CREATE TABLE  Magazyn (ID int IDENTITY(1,1), 
kodTowaru char(500), nazwaTowaru varchar(500),
klient nvarchar(500), KAM varchar(100), IDtaryfaMag integer,
JM char(3) , iloscWMAG float , DataWaznosci date, Trwaloscproduktu int, 
CONSTRAINT FK_Taryfa FOREIGN KEY (IDtaryfaMag) REFERENCES Tafya (ID) 
PRIMARY KEY(kodTowaru, nazwaTowaru, klient, KAM, IDtaryfaMag, JM, iloscWMAG, 
DataWaznosci, Trwaloscproduktu,));
 
 --Tworzenie tabeli w formacie danych, który zrzuca program ERP lub dowolny magazynowy —-
/*
klucz główny został utworzony na prawie wszystkich kolumnach tabeli pełni on funkcję chroniącą przed wrzuceniem duplikatów do tabeli
*/

IF OBJECT_ID('uspPobierzDane') IS NOT NULL DROP PROC  uspPobierzDane;

GO

CREATE PROC dbo.uspPobierzDane
AS BEGIN

EXEC sp_configure 'show advanced options', 1;
RECONFIGURE WITH OVERRIDE;
 
EXEC sp_configure 'Ad Hoc Distributed Queries', 1;
RECONFIGURE WITH OVERRIDE;

--uruchamia możliwość skorzystania z OPENROWSET i wyciągnięcia danych z dowolnego pliku--

INSERT INTO Magazyn (kodTowaru, nazwaTowaru, klient, KAM, IDtaryfaMag,
JM, iloscWMAG, DataWaznosci, Trwaloscproduktu)
SELECT * FROM OPENROWSET('Microsoft.ACE.OLEDB.12.0',
'Excel 12.0; Database=C:\Users\JK43\Desktop\Magazyn.xlsx', 'SELECT * FROM [Magazyn$]')
END;

/*
importuje dane z pliku zrzuconego przez ERP lub program magazynowy do tabeli magazyn przy założeniu, 
że zrzut z ERP został wyeksportowany do arkusza kalkulacyjnego Excel o nazwie Magazyn.
*/

SELECT*FROM Magazyn;

 --sprawdza co zostało wrzucone do tabeli magazyn--

IF OBJECT_ID('vRapMagazyn') IS NOT NULL DROP VIEW vRapMagazyn;

--sprawdza czy istnieje widok Rapmagazyn jeśli tak likwiduje go--

CREATE VIEW vRapMagazyn
AS

SELECT kodTowaru, nazwaTowaru,klient, KAM, IDtaryfaMag, JM, iloscWMAG, DataWaznosci, 
Trwaloscproduktu,dateadd(day,-Trwaloscproduktu,DataWaznosci) AS ProdDate, GetDate()  AS dzis,
datediff(day,dateadd(day,-Trwaloscproduktu,DataWaznosci), GetDate()) AS MagazDni,
iloscWMAG*(datediff(day,dateadd(day,-Trwaloscproduktu,DataWaznosci),GetDate()))*stawka AS oplataMagazynowa
FROM Magazyn  INNER JOIN  Taryfa AS c ON IDtaryfaMag=c.ID;

--Tworzenie widoku, który przechowuje wszystkie potrzebne do raportowania dane--
 
IF OBJECT_ID('uspKosztyMagNaKlienta') IS NOT NULL DROP PROC uspKosztyMagNaKlienta;

--sprawdza czy taka procedura już nie istnieje jeśli tak to ją likwiduje--

CREATE PROC dbo.uspKosztyMagNaKlienta (@nazwaklienta nvarchar (500))
AS

SELECT klient, SUM(oplataMagazynowa) AS KosztMagazynowania
 FROM Magazynowanie.dbo.vRapMagazyn WHERE klient=@nazwaklienta GROUP BY klient;
 
/*
Tworzy procedurę składową, która dla podanej nazwy klienta zwraca jego całkowity koszt magazynowania, 
może być wykorzystane przez aplikację webową do wyświetlania na stronie
*/

IF OBJECT_ID('uspCzyscMagazyn') IS NOT NULL DROP PROC  uspCzyscMagazyn;

GO

CREATE PROC dbo.uspCzyscMagazyn

AS

BEGIN 

TRUNCATE TABLE  dbo.Magazyn

END;

/*
Czyści tabelę magazyn przed każdym nowy  importem danych trzeba ją uruchomić i usunąć poprzednie wpisy. 
Zakładamy, że raport zewnętrzny  będący źródłem danych zawsze przedstawia aktualny stan magazynowy będący podstawą do raportowania 
*/





----------------------------------------------------UPDATE MODYFIKACJA-------------------------------------------------------------------------
/*Zamina dotyczy połączenia kodu wykonywanego w dwóch obiektach(uspPobierzDane i uspCzyscMagazyn) 
w jeden oraz dopisanie  wyłączenia ADHOC Queries*/

/*kod dla procedury uspPobierzDane po modyfikacji wygląda następująco*/

 
IF OBJECT_ID('uspPobierzDane') IS NOT NULL DROP PROC  uspPobierzDane;

GO

CREATE PROC dbo.uspPobierzDane
AS BEGIN

TRUNCATE TABLE  dbo.Magazyn;

/*
czyści poprzednie już niaktualne dane z tabeli magazyn
(dane pochodzą z pliku zewnętrznego z systemu magazynowego i pokazują stan w magazynie na dany dzień)
*/

EXEC sp_configure 'show advanced options', 1;
RECONFIGURE WITH OVERRIDE;
 
EXEC sp_configure 'Ad Hoc Distributed Queries', 1;
RECONFIGURE WITH OVERRIDE;

--uruchamia możliwość skorzystania z OPENROWSET i wyciągnięcia danych z dowolnego pliku--

INSERT INTO Magazyn (kodTowaru, nazwaTowaru, klient, KAM, IDtaryfaMag,
JM, iloscWMAG, DataWaznosci, Trwaloscproduktu)
SELECT * FROM OPENROWSET('Microsoft.ACE.OLEDB.12.0',
'Excel 12.0; Database=C:\Users\JK43\Desktop\Magazyn.xlsx', 'SELECT * FROM [Magazyn$]')
END;

/*
importuje dane z pliku zrzuconego przez ERP lub program magazynowy do tabeli magazyn przy założeniu, 
że zrzut z ERP został wyeksportowany do arkusza kalkulacyjnego Excel o nazwie Magazyn.
*/



EXEC sp_configure 'Ad Hoc Distributed Queries', 0;
RECONFIGURE WITH OVERRIDE;


EXEC sp_configure 'show advanced options', 0;
RECONFIGURE WITH OVERRIDE;

--Wyłączenie AD HOC Queries--








